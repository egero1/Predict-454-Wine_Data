varimp = varImp(wine_nnet)
varimp$importance = as.data.frame(varimp$importance)[, -1]
plot(varimp, main = "Variable Importance - Neural Net", layout = c(1,3))
# Training set predictions for roc
wine_nnet_pred_probs <- predict(wine_rf, wine_data, type = "prob")
## Create ROC curve
wine_nnet_roc <- roc(response = wine_data$Cultivar, predictor = wine_nnet_pred_probs[,2], levels = c("One", "Two"))
#wine_rf_roc <- multiclass.roc(response = wine_data$Cultivar, predictor = wine_rf_pred_probs, levels = c("One", "Two", "Three"))
## Plot ROC curve
plot(wine_nnet_roc, col = "blue", main = paste0("ROC Curve for Random Forest - 1: AUC ", round(wine_nnet_roc$auc[1], 4)))
# not falid for or useful for two reasonse... one this is multiclass.. 2 with a sensitivy of 1, all plots are the same and no information can be gained
# Create the confusion matrix
wine_nnet_pred <- predict(wine_nnet, wine_data)
confusionMatrix(data = wine_nnet_pred, wine_data$Cultivar, positive = "One")
# Fit the model
# Model 3
set.seed(123)
wine_nnet <- train(Cultivar ~ .,
data = wine_data,
method = "nnet",
trace = FALSE,
importance = TRUE,
trControl = fitControl)
# Summary
wine_nnet$finalModel
# Plot important variables identified by the random forest model
varimp = varImp(wine_nnet)
varimp$importance = as.data.frame(varimp$importance)[, -1]
plot(varimp, main = "Variable Importance - Neural Net", layout = c(1,3))
# Training set predictions for roc
wine_nnet_pred_probs <- predict(wine_rf, wine_data, type = "prob")
## Create ROC curve
wine_nnet_roc <- roc(response = wine_data$Cultivar, predictor = wine_nnet_pred_probs[,2], levels = c("One", "Two"))
#wine_rf_roc <- multiclass.roc(response = wine_data$Cultivar, predictor = wine_rf_pred_probs, levels = c("One", "Two", "Three"))
## Plot ROC curve
plot(wine_nnet_roc, col = "blue", main = paste0("ROC Curve for Random Forest - 1: AUC ", round(wine_nnet_roc$auc[1], 4)))
# not falid for or useful for two reasonse... one this is multiclass.. 2 with a sensitivy of 1, all plots are the same and no information can be gained
# Create the confusion matrix
wine_nnet_pred <- predict(wine_nnet, wine_data)
confusionMatrix(data = wine_nnet_pred, wine_data$Cultivar, positive = "One")
vars <- wine_data[,c("Alcohol", "Flavanoids", "Cultivar")]
fitControl = trainControl(method = "cv", classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "nnet",
importance = TRUE,
trace = FALSE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "NNET: Important Variables", predict_type = "raw")
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
# Fit the model
# Model 3
set.seed(123)
wine_nnet <- train(Cultivar ~ .,
data = wine_data,
method = "nnet",
trace = FALSE,
importance = TRUE,
trControl = fitControl)
# Summary
wine_nnet$finalModel
# Plot important variables identified by the random forest model
varimp = varImp(wine_nnet)
varimp$importance = as.data.frame(varimp$importance)[, -1]
plot(varimp, main = "Variable Importance - Neural Net", layout = c(1,3))
# Training set predictions for roc
wine_nnet_pred_probs <- predict(wine_rf, wine_data, type = "prob")
## Create ROC curve
wine_nnet_roc <- roc(response = wine_data$Cultivar, predictor = wine_nnet_pred_probs[,2], levels = c("One", "Two"))
#wine_rf_roc <- multiclass.roc(response = wine_data$Cultivar, predictor = wine_rf_pred_probs, levels = c("One", "Two", "Three"))
## Plot ROC curve
plot(wine_nnet_roc, col = "blue", main = paste0("ROC Curve for Random Forest - 1: AUC ", round(wine_nnet_roc$auc[1], 4)))
# not falid for or useful for two reasonse... one this is multiclass.. 2 with a sensitivy of 1, all plots are the same and no information can be gained
# Create the confusion matrix
wine_nnet_pred <- predict(wine_nnet, wine_data)
confusionMatrix(data = wine_nnet_pred, wine_data$Cultivar, positive = "One")
vars <- wine_data[,c("Alcohol", "Flavanoids", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "nnet",
importance = TRUE,
trace = FALSE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "NNET: Important Variables", predict_type = "raw")
wine_rf$finalModel
fitControl = trainControl(classProbs = TRUE)
# Fit the model
set.seed(123)
wine_rf <- train(Cultivar ~ .,
data = wine_data,
method = "rf",
importance = TRUE,
trControl = fitControl)
wine_rf$finalModel
vars <- wine_data[,c("Proline", "Alcohol", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "rf",
importance = TRUE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "Random Forest: Important Variables - Cultivar 1", predict_type = "raw")
confusionMatrix(predict(impVars, vars, type = "raw", vars$Cultivar))
confusionMatrix(predict(impVars, vars$Cultivar, type = "raw"), vars)
vars <- wine_data[,c("Proline", "Alcohol", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "rf",
importance = TRUE,
trControl = fitControl)
confusionMatrix(predict(impVars, vars$Cultivar, type = "raw"), vars)
View(vars)
confusionMatrix(predict(impVars, vars, type = "raw"), vars$Cultivar)
vars <- wine_data[,c("Nonflavanoid_phenols", "Ash", "Cultivar")]
fitControl = trainControl(classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "rf",
importance = TRUE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "Random Forest: Important Variables - Bad Pair", predict_type = "raw")
# (2) a Support Vector Machine
# Set run parameters
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
# Fit the model
# Model 2
set.seed(123)
wine_svm <- train(Cultivar ~ .,
data = wine_data,
method = "svmRadialWeights",
importance = TRUE,
trControl = fitControl)
# Summary
wine_svm$finalModel
# Plot important variables identified by the random forest model
plot(varImp(wine_svm), main = "Variable Importance - Support Vector Machine", layout = c(1,3))
v<- varImp(wine_svm)
# Training set predictions for roc
wine_svm_pred_probs <- predict(wine_rf, wine_data, type = "prob")
## Create ROC curve
wine_svm_roc <- roc(response = wine_data$Cultivar, predictor = wine_svm_pred_probs[,2], levels = c("One", "Two"))
#wine_rf_roc <- multiclass.roc(response = wine_data$Cultivar, predictor = wine_rf_pred_probs, levels = c("One", "Two", "Three"))
## Plot ROC curve
plot(wine_svm_roc, col = "blue", main = paste0("ROC Curve for Random Forest - 1: AUC ", round(wine_svm_roc$auc[1], 4)))
# not falid for or useful for two reasonse... one this is multiclass.. 2 with a sensitivy of 1, all plots are the same and no information can be gained
# Create the confusion matrix
wine_svm_pred <- predict(wine_svm, wine_data)
confusionMatrix(data = wine_svm_pred, wine_data$Cultivar, positive = "One")
#confusionMatrix(data = wine_rf_pred, wine_data$Cultivar, positive = "One")$overall
#table_rates(table(rf_pred_train, train$spam_indicator))
wine_svm
View(wine_svm)
plot(wine_svm)
plot(wine_svm$finalModel)
wine_svm$results
wine_svm$modelInfo$fit()
varImp(wine_svm)
vars <- wine_data[,c("OD280_OD315", "Flavanoids", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "svmRadialWeights",
importance = TRUE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")
confusionMatrix(predict(impVars, vars), vars$Cultivar)
set.seed(101)
x <- rbind(matrix(rnorm(120),,2),matrix(rnorm(120,mean=3),,2))
y <- matrix(c(rep(1,60),rep(-1,60)))
svp <- ksvm(x,y,type="C-svc")
plot(svp,data=x)
vars[,1:2]
x <- vars[,1:2]
y <- vars[,3]
x <- vars[,1:2]
y <- vars[,3]
svp <- ksvm(x,y,type="C-svc")
plot(svp,data=x)
svp <- ksvm(x,y,type="spoc-svc")
plot(svp,data=x)
svp <- ksvm(x,y,type="spoc-svc")
x <- vars[,1:2]
y <- vars[,3]
svp <- ksvm(x,y,type="rbfdot")
plot(svp,data=x)
svp <- ksvm(Cultivar~., data = vars,type="rbfdot")
plot(svp,data=vars)
plot(svp)
svp <- ksvm(Cultivar~., data = wine_data,type="rbfdot")
plot(svp)
svp <- ksvm(Cultivar~., data = wine_data,type="rbfdot")
plot(svp, main = "test")
plot(svp, title = "test")
set.seed(101)
x <- rbind(matrix(rnorm(120),,2),matrix(rnorm(120,mean=3),,2))
y <- matrix(c(rep(1,60),rep(-1,60)))
svp <- ksvm(Cultivar~., data = wine_data,type="rbfdot")
plot(svp, data = x,title = "test")
plot(svp, data = x, main = "test")
svp <- ksvm(Cultivar~., data = wine_data,type="rbfdot")
svp <- ksvm(Cultivar~., data = wine_data,type="kbb-svc")
plot(svp, data = wine_data, main = "test")
svp <- ksvm(Cultivar~., data = wine_data,type="spoc-svc")
plot(svp, data = wine_data, main = "test")
svp <- ksvm(Cultivar~., data = wine_data,type="spoc-svc", kernel = "rbfdot")
plot(svp, data = wine_data, main = "test")
svp <- ksvm(Cultivar~., data = wine_data,type="C-svc", kernel = "rbfdot")
plot(svp, data = wine_data)
svp <- ksvm(Cultivar~., data = wine_data, kernel = "rbfdot")
plot(svp, data = wine_data)
y <- matrix(c(rep(1,60),rep(-1,60)))
y
plot(vars[,1:2], col=as.integer(vars$Cultivar))
plot(wine_data[1:13], col=as.integer(vars$Cultivar))
plot(wine_data[2:14], col=as.integer(vars$Cultivar))
plot(wine_svm$finalModel)
decisionplot(model = wine_svm, data = wine_data, class = "Cultivar",
main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")
decisionplot(model = wine_svm, data = wine_data[2:14], class = "Cultivar",
main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")
plot3d
View(decisionplot)
function(model, data, class = NULL, predict_type = "class",
resolution = 100, showgrid = TRUE, ...) {
if(!is.null(class)) cl <- data[,class] else cl <- 1
data <- data[,1:2]
k <- length(unique(cl))
plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
legend("top", legend = unique(cl), horiz = TRUE,
col = as.integer(unique(cl))+1L, pch = as.integer(unique(cl))+1L)
# make grid
r <- sapply(data, range, na.rm = TRUE)
xs <- seq(r[1,1], r[2,1], length.out = resolution)
ys <- seq(r[1,2], r[2,2], length.out = resolution)
g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
colnames(g) <- colnames(r)
g <- as.data.frame(g)
### guess how to get class labels from predict
### (unfortunately not very consistent between models)
p <- predict(model, g, type = predict_type)
if(is.list(p)) p <- p$class
p <- as.factor(p)
if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
#contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
#        lwd = 1, levels = (1:(k-1))+.5)
#contourplot(z ~ xs * ys , data = data, lwd = 1, cuts = (1:(k-1))+.5)
cloud(z ~ xs * ys, data = data, lwd = 1, cuts = (1:(k-1))+.5)
invisible(z)
}
# Decision boundaries - important variables: Cultivar One and Three
vars <- wine_data[,c("OD280_OD315", "Flavanoids", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "svmRadialWeights",
importance = TRUE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")
View(decisionplot)
function(model, data, class = NULL, predict_type = "class",
resolution = 100, showgrid = TRUE, ...) {
if(!is.null(class)) cl <- data[,class] else cl <- 1
data <- data[,1:2]
k <- length(unique(cl))
plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
legend("top", legend = unique(cl), horiz = TRUE,
col = as.integer(unique(cl))+1L, pch = as.integer(unique(cl))+1L)
# make grid
r <- sapply(data, range, na.rm = TRUE)
xs <- seq(r[1,1], r[2,1], length.out = resolution)
ys <- seq(r[1,2], r[2,2], length.out = resolution)
g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
colnames(g) <- colnames(r)
g <- as.data.frame(g)
### guess how to get class labels from predict
### (unfortunately not very consistent between models)
p <- predict(model, g, type = predict_type)
if(is.list(p)) p <- p$class
p <- as.factor(p)
if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
#contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
#        lwd = 1, levels = (1:(k-1))+.5)
#contourplot(z ~ xs * ys , data = data, lwd = 1, cuts = (1:(k-1))+.5)
cloud(z ~ xs * ys, data = data, lwd = 1, cuts = (1:(k-1))+.5)
invisible(z)
}
View(decisionplot)
View(decisionplot)
cloud(z ~ xs * ys, data = data, lwd = 1, cuts = (1:(k-1))+.5)
decisionplot <- function(model, data, class = NULL, predict_type = "class",
resolution = 100, showgrid = TRUE, ...) {
if(!is.null(class)) cl <- data[,class] else cl <- 1
data <- data[,1:2]
k <- length(unique(cl))
plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
legend("top", legend = unique(cl), horiz = TRUE,
col = as.integer(unique(cl))+1L, pch = as.integer(unique(cl))+1L)
# make grid
r <- sapply(data, range, na.rm = TRUE)
xs <- seq(r[1,1], r[2,1], length.out = resolution)
ys <- seq(r[1,2], r[2,2], length.out = resolution)
g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
colnames(g) <- colnames(r)
g <- as.data.frame(g)
### guess how to get class labels from predict
### (unfortunately not very consistent between models)
p <- predict(model, g, type = predict_type)
if(is.list(p)) p <- p$class
p <- as.factor(p)
if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
#contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
#        lwd = 1, levels = (1:(k-1))+.5)
#contourplot(z ~ xs * ys , data = data, lwd = 1, cuts = (1:(k-1))+.5)
cloud(z ~ xs * ys, data = data, lwd = 1, cuts = (1:(k-1))+.5)
invisible(z)
}
View(decisionplot)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")
impVars
impVars$finalModel
decisionplot <- function(model, data, class = NULL, predict_type = "class",
resolution = 100, showgrid = TRUE, ...) {
if(!is.null(class)) cl <- data[,class] else cl <- 1
data <- data[,1:2]
k <- length(unique(cl))
plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
legend("top", legend = unique(cl), horiz = TRUE,
col = as.integer(unique(cl))+1L, pch = as.integer(unique(cl))+1L)
# make grid
r <- sapply(data, range, na.rm = TRUE)
xs <- seq(r[1,1], r[2,1], length.out = resolution)
ys <- seq(r[1,2], r[2,2], length.out = resolution)
g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
colnames(g) <- colnames(r)
g <- as.data.frame(g)
### guess how to get class labels from predict
### (unfortunately not very consistent between models)
p <- predict(model, g, type = predict_type)
if(is.list(p)) p <- p$class
p <- as.factor(p)
if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
lwd = 1, levels = (1:(k-1))+.5)
invisible(z)
}
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "svmRadialWeights",
importance = TRUE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")
confusionMatrix(predict(impVars, vars), vars$Cultivar)
a <- expand.grid(1:20, 1:20)
a <- expand.grid(1:20, 1:20, 1:20)
confusionMatrix(predict(impVars, vars), vars$Cultivar)
vars <- wine_data[,c("Hue", "Flavanoids", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "svmRadialWeights",
importance = TRUE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "SVM: Important Variables - Cultivar 2", predict_type = "raw")
confusionMatrix(predict(impVars, vars), vars$Cultivar)
# Fit the model
# Model 3
set.seed(123)
wine_nnet <- train(Cultivar ~ .,
data = wine_data,
method = "nnet",
trace = FALSE,
importance = TRUE,
trControl = fitControl)
# Summary
wine_nnet$finalModel
# Plot important variables identified by the random forest model
varimp = varImp(wine_nnet)
varimp$importance = as.data.frame(varimp$importance)[, -1]
plot(varimp, main = "Variable Importance - Neural Net", layout = c(1,3))
# Training set predictions for roc
wine_nnet_pred_probs <- predict(wine_rf, wine_data, type = "prob")
## Create ROC curve
wine_nnet_roc <- roc(response = wine_data$Cultivar, predictor = wine_nnet_pred_probs[,2], levels = c("One", "Two"))
#wine_rf_roc <- multiclass.roc(response = wine_data$Cultivar, predictor = wine_rf_pred_probs, levels = c("One", "Two", "Three"))
## Plot ROC curve
plot(wine_nnet_roc, col = "blue", main = paste0("ROC Curve for Random Forest - 1: AUC ", round(wine_nnet_roc$auc[1], 4)))
# not falid for or useful for two reasonse... one this is multiclass.. 2 with a sensitivy of 1, all plots are the same and no information can be gained
# Create the confusion matrix
wine_nnet_pred <- predict(wine_nnet, wine_data)
confusionMatrix(data = wine_nnet_pred, wine_data$Cultivar, positive = "One")
# collect resamples
results <- resamples(list(RF=wine_rf, SVM=wine_svm, NNET=wine_nnet))
# summarize the distributions
summary(results)
# boxplots of results
bwplot(results)
# collect resamples
results <- resamples(list(RF=wine_rf, SVM=wine_svm, NNET=wine_nnet))
## Model Build
# Model 1 - Random Forest
# Set run parameters
fitControl = trainControl(method="repeatedcv", number=10, repeats=3, classProbs = TRUE)
# Fit the model
set.seed(123)
wine_rf <- train(Cultivar ~ .,
data = wine_data,
method = "rf",
importance = TRUE,
trControl = fitControl)
# Summary
wine_rf$finalModel
# collect resamples
results <- resamples(list(RF=wine_rf, SVM=wine_svm, NNET=wine_nnet))
summary(results)
# boxplots of results
bwplot(results)
# dot plots of results
dotplot(results)
# Decision boundaries - important variables: Cultivars
vars <- wine_data[,c("Alcohol", "Flavanoids", "Cultivar")]
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
set.seed(123)
impVars <- train(Cultivar ~ .,
data = vars,
method = "nnet",
importance = TRUE,
trace = FALSE,
trControl = fitControl)
decisionplot(model = impVars, data = vars, class = "Cultivar",
main = "NNET: Important Variables", predict_type = "raw")
confusionMatrix(predict(impVars, vars), vars$Cultivar)
plot(wine_nnet)
plot(neuralnet(Cultivar~., wine_data))
install.packages("neuralnet")
library(neuralnet)
plot(neuralnet(Cultivar~., wine_data))
plot(neuralnet(Cultivar~ Alcohol + Ash, wine_data))
results <- resamples(list(RF=wine_rf, SVM=wine_svm, NNET=wine_nnet))
# summarize the distributions
summary(results)
# boxplots of results
bwplot(results)
# boxplots of results
bwplot(results, main = "Model Comparison")
fitControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE)
# Fit the model
# Model 2
set.seed(123)
wine_svm <- train(Cultivar ~ .,
data = wine_data,
method = "svmRadialWeights",
importance = TRUE,
trControl = fitControl)
# Summary
wine_svm$finalModel
summary(results)
# boxplots of results
bwplot(results, main = "Model Comparison")
