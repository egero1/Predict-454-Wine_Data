decisionplot <- function(model, data, class = NULL, predict_type = "class",
                         resolution = 100, showgrid = TRUE, ...) {
        
        if(!is.null(class)) cl <- data[,class] else cl <- 1
        data <- data[,1:2]
        k <- length(unique(cl))
        
        plot(data, col = as.integer(cl)+1L, pch = as.integer(cl)+1L, ...)
        legend("top", legend = unique(cl), horiz = TRUE, 
               col = as.integer(unique(cl))+1L, pch = as.integer(unique(cl))+1L)
        
        # make grid
        r <- sapply(data, range, na.rm = TRUE)
        xs <- seq(r[1,1], r[2,1], length.out = resolution)
        ys <- seq(r[1,2], r[2,2], length.out = resolution)
        g <- cbind(rep(xs, each=resolution), rep(ys, time = resolution))
        colnames(g) <- colnames(r)
        g <- as.data.frame(g)
        
        ### guess how to get class labels from predict
        ### (unfortunately not very consistent between models)
        p <- predict(model, g, type = predict_type)
        if(is.list(p)) p <- p$class
        p <- as.factor(p)
        
        if(showgrid) points(g, col = as.integer(p)+1L, pch = ".")
        
        z <- matrix(as.integer(p), nrow = resolution, byrow = TRUE)
        contour(xs, ys, z, add = TRUE, drawlabels = FALSE,
                lwd = 1, levels = (1:(k-1))+.5)
        #contourplot(z ~ xs * ys , data = data, lwd = 1, cuts = (1:(k-1))+.5)
        
        invisible(z)
}



set.seed(1000)
data(iris)

# Two class case
#x <- iris[1:100, c("Sepal.Length", "Sepal.Width", "Species")]
#x$Species <- factor(x$Species)

# Three classes
x <- iris[1:150, c("Sepal.Length", "Sepal.Width", "Species")]

# Easier to separate
#x <- iris[1:150, c("Petal.Length", "Petal.Width", "Species")]

head(x)
class(x)
model <- randomForest(Species ~ ., data=x)
decisionplot(model, x, class = "Species", main = "Random Forest")




require(stats)
attach(environmental)
ozo.m <- loess((ozone^(1/3)) ~ wind * temperature * radiation,
               parametric = c("radiation", "wind"), span = 1, degree = 2)
w.marginal <- seq(min(wind), max(wind), length.out = 50)
t.marginal <- seq(min(temperature), max(temperature), length.out = 50)
r.marginal <- seq(min(radiation), max(radiation), length.out = 4)
wtr.marginal <- list(wind = w.marginal, temperature = t.marginal,
                     radiation = r.marginal)
grid <- expand.grid(wtr.marginal)
grid[, "fit"] <- c(predict(ozo.m, grid))
contourplot(fit ~ wind * temperature | radiation, data = grid,
            cuts = 10, region = TRUE,
            xlab = "Wind Speed (mph)",
            ylab = "Temperature (F)",
            main = "Cube Root Ozone (cube root ppb)",
            lwd = 4)
detach()

set.seed(101)
x <- rbind(matrix(rnorm(120),,2),matrix(rnorm(120,mean=3),,2))
y <- matrix(c(rep(1,60),rep(-1,60)))

svp <- ksvm(Cultivar~., data = wine_data, kernel = "rbfdot")
plot(svp, data = wine_data)

plot(wine_data[2:14], col=as.integer(vars$Cultivar))


decisionplot(model = wine_svm, data = wine_data[2:14], class = "Cultivar", 
             main = "SVM: Important Variables - Cultivar 1 & 3", predict_type = "raw")